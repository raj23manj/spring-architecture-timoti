logging:
  pattern:
    console: "[Organization Development] %clr(%d{HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr(---){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}"
  
server:
  port: 8885
  
spring:
  application:    name: organization-development
  main:
    banner-mode: OFF
  devtools:
    restart:
      additional-paths:
      - conf/**
  kafka:
    listener:
      missing-topics-fatal: false
    producer:
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer        
    consumer:
      group-id: organization-development-cg
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: "*"
  cloud:
    consul:
      discovery:
        prefer-ip-address: true
        health-check-path: /ping
        instance-id: organization-development-${random.int}
  datasource:
    url: jdbc:postgresql://localhost:5432/postgres
    username: postgres_user
    password: postgres_password
  jpa:
    show-sql: false
    hibernate:
      ddl-auto: create
    properties:
      hibernate.default_schema: organization_development
    
resilience4j:
  circuitbreaker:    configs:      default:
        register-health-indicator: true
        minimum-number-of-calls: 10
        failure-rate-threshold: 50
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 30s
        record-exceptions:
          - feign.RetryableException
  retry:
    configs:      default:
        max-attempts: 3
        wait-duration: 5s

management:  endpoints:    web:      exposure:        include: "*"
  endpoint:    health:      show-details: always
  health:    circuitbreakers:      enabled: true